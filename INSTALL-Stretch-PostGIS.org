#+TITLE: Debian Testing (Stretch) PostGIS install
#+AUTHOR: Mathieu Basille
#+EMAIL: basille@ufl.edu

This is an additional tutorial to add PostGIS to a Debian Testing
(Stretch) install. The basis is covered in [[INSTALL-Stretch.org][Debian Testing (Stretch)
install]], but this tutorial should only require a functional Debian
Stretch.

* Table of contents                                                   :TOC_3:
 - [[#postgis-install][PostGIS install]]
   - [[#dependencies-and-clients][Dependencies and clients]]
   - [[#postgresql-and-pgadmin][PostgreSQL and pgAdmin]]
     - [[#pgadmin4][pgAdmin4]]
   - [[#postgis-and-plr][PostGIS and Pl/R]]
   - [[#uninstall][Uninstall]]
   - [[#test][Test]]
 - [[#post-install-operations][Post-install operations]]
   - [[#create-a-superuser][Create a superuser]]
   - [[#move-the-data-directory-to-home][Move the data directory to HOME]]
   - [[#enabling-postgis-on-a-database][Enabling PostGIS on a database]]

* PostGIS install

** Dependencies and clients

We first check or install required libraries: GDAL (2.1), GEOS (3.5)
and Proj4 (4.9), which are present in official Debian respositories:

#+BEGIN_SRC sh
  sudo apt install gdal-bin libgdal-dev libgeos-dev proj-bin libproj-dev
#+END_SRC

We can check the formats supported by OGR (vector) and GDAL (raster)
with:

#+BEGIN_SRC sh
ogrinfo --formats | grep Post
gdalinfo --formats | grep Post
#+END_SRC

which should return, respectively:

#+BEGIN_SRC sh
  PostgreSQL -vector- (rw+): PostgreSQL/PostGIS
  PGDUMP -vector- (w+v): PostgreSQL SQL dump
#+END_SRC

#+BEGIN_SRC sh
  PostGISRaster -raster- (rws): PostGIS Raster driver
#+END_SRC

We also install QGIS as the main GIS client. Debian does not ship the
most recent QGIS, so we first add the official QGIS repository:

#+BEGIN_SRC sh
  sudo nano /etc/apt/sources.list  
#+END_SRC

and add the following:

#+BEGIN_SRC sh
  ## ======================================================= ##
  ##                                                         ##
  ##                          QGIS                           ##
  ##                                                         ##
  ## ======================================================= ##
  ## URL:                                                    ##
  ## https://www.qgis.org/en/site/forusers/alldownloads.html#debian-ubuntu
  ## ======================================================= ##
  ## Note on QGIS versions:                                  ##
  ## The repository provides the latest release, LTR and     ##
  ## dev. Debian Jessie (stable), Stretch (testing) and Sid  ##
  ## are supported.                                          ##
  ## ======================================================= ##
  ## Key                                                     ##
  ## $ wget --quiet -O - http://qgis.org/downloads/qgis-2016.gpg.key | sudo apt-key add -
  ## ======================================================= ##

  ## Latest release
  deb http://qgis.org/debian stretch main
  #deb-src http://qgis.org/debian stretch main

  ## Long-term release
  #deb http://qgis.org/debian-ltr stretch main
  #deb-src http://qgis.org/debian-ltr stretch main

  ## Development Version
  #deb http://qgis.org/debian-nightly stretch main
  #deb-src http://qgis.org/debian-nightly stretch main
#+END_SRC

This requires to add the key of the repository and update the sources:

#+BEGIN_SRC sh
  wget --quiet -O - http://qgis.org/downloads/qgis-2016.gpg.key | sudo apt-key add -
  sudo apt update
#+END_SRC

We can now install the latest release of QGIS (2.18):

#+BEGIN_SRC sh
  sudo apt install qgis python-qgis
#+END_SRC


** PostgreSQL and pgAdmin

Like for QGIS, Debian does not always provide the most recent
PostgreSQL release.  We thus add the [[https://wiki.postgresql.org/wiki/Apt][official PostgreSQL repository]]:

#+BEGIN_SRC sh
  sudo nano /etc/apt/sources.list  
#+END_SRC

and add the following:

#+BEGIN_SRC sh
  ## ======================================================= ##
  ##                                                         ##
  ##                        POSTGRESQL                       ##
  ##                                                         ##
  ## ======================================================= ##
  ## URL:                                                    ##
  ## https://wiki.postgresql.org/wiki/Apt                    ##
  ## ======================================================= ##
  ## Note on PostgreSQL versions:                            ##
  ## Debian Jessie (stable), Stretch (testing) and Sid are   ##
  ## supported.                                              ##
  ## To install latest relase, install meta-packages:        ##
  ## $ sudo apt install postgresql postgresql-contrib postgresql-client
  ## ======================================================= ##
  ## Key:                                                    ##
  ## $ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  ## ======================================================= ##

  deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main
#+END_SRC

This requires to add the key of the repository and update the sources:

#+BEGIN_SRC sh
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  sudo apt update
#+END_SRC

We can now install the latest release of PostgreSQL (9.6) and pgAdmin
(3 v1.22):

#+BEGIN_SRC 
  sudo apt install postgresql postgresql-client postgresql-contrib pgadmin3
#+END_SRC


*** pgAdmin4

Unfortunately, neither Debian nor official PostgreSQL ships
pgAdmin4. To install the latest release of pgAdmin (4 v1.22), which
comes as a web app, use PIP. First check dependencies:

#+BEGIN_SRC sh
  sudo apt-get install build-essential libssl-dev libffi-dev python-dev libgmp3-dev
  sudo pip install virtualenvwrapper cryptography pyopenssl ndg-httpsclient pyasn1
#+END_SRC

Then create a virtual environment named =pgadmin4= and activate it:

#+BEGIN_SRC sh
  cd
  virtualenv pgadmin4
  cd pgadmin4
  source bin/activate
#+END_SRC

Download and install pgAdmin4:

#+BEGIN_SRC sh
  wget https://ftp.postgresql.org/pub/pgadmin3/pgadmin4/v1.2/pip/pgadmin4-1.2-py2-none-any.whl
  sudo pip install pgadmin4
  rm pgadmin4-1.2-py2-none-any.whl
#+END_SRC

Finally remove the virtual environment:

#+BEGIN_SRC sh
  cd
  rm -r pgadmin4
#+END_SRC

To use pgAdmin4 on the desktop (i.e. not on a webserver), turn the
server mode OFF in the config file:

#+BEGIN_SRC sh
  sudo nano /usr/local/lib/python2.7/dist-packages/pgadmin4/config.py
#+END_SRC

#+BEGIN_SRC 
  ##########################################################################
  # Server settings
  ##########################################################################
  
  SERVER_MODE = False
#+END_SRC

And apply the settings:

#+BEGIN_SRC sh
  python /usr/local/lib/python2.7/dist-packages/pgadmin4/setup.py
#+END_SRC

To run pgAdmin4, we can create a shortlink in =/usr/local/bin/=:

#+BEGIN_SRC sh
  sudo touch /usr/local/bin/pgadmin4-run
  sudo chmod +x /usr/local/bin/pgadmin4-run
  sudo nano /usr/local/bin/pgadmin4-run
#+END_SRC

with the following in it:

#+BEGIN_SRC 
#!/bin/sh
  
python /usr/local/lib/python2.7/dist-packages/pgadmin4/pgAdmin4.py
#+END_SRC

Finally, type =pgadmin4-run= to start pgAdmin4, and access it at
[[http://localhost:5050]].


** PostGIS and Pl/R

Finally, we install the two extensions PostGIS and Pl/R (note that
this package is specific to each PostgreSQL version):

#+BEGIN_SRC sh
  sudo apt install postgis postgis-gui postgresql-9.6-plr 
#+END_SRC


** Uninstall

In case there is the need to uninstall PostgreSQL/PostGIS:

#+BEGIN_SRC sh
  sudo apt purge '.*postgis.*'
  sudo apt purge '.*postgresql.*'
#+END_SRC


** Test

We first check the status of the server:

#+BEGIN_SRC sh
  pg_lsclusters 
#+END_SRC

which returns something like:

#+BEGIN_SRC 
  Ver Cluster Port Status Owner    Data directory            Log file
  9.6 main    5432 online postgres /home/postgresql/9.6/main var/log/postgresql/postgresql-9.6-main.log
#+END_SRC

We can also simply check that we can access the server:

#+BEGIN_SRC sh
  sudo -u postgres psql postgres
#+END_SRC

and check the PostgreSQL version:

#+BEGIN_SRC sql
  SELECT version();
#+END_SRC

Use ~\q~ to exit.


* Post-install operations


** Create a superuser

On a single-user machine, we want to be able to use the Linux user as
a superuser of PostgreSQL. We thus add it as superuser:

#+BEGIN_SRC sh
   sudo -u postgres createuser --superuser $USER
#+END_SRC

We now create a database =test= using the Linux user, and access it:

#+BEGIN_SRC sh
  createdb test
  psql test
#+END_SRC

Finally, we change the password of the PostgreSQL superuser:

#+BEGIN_SRC sql
  ALTER USER mathieu PASSWORD 'mathieuSQL';
#+END_SRC

Thanks to the =ident sameuser= setting of PostgreSQL, we can access
databases on the system with the Linux user, without having to give
the password.


** Move the data directory to HOME

We start by checking out the PostgreSQL data directory:

#+BEGIN_SRC sh
  psql test
#+END_SRC

#+BEGIN_SRC SQL
  SHOW data_directory;
#+END_SRC

This should return something like:

#+BEGIN_SRC 
          data_directory        
  ------------------------------
   /var/lib/postgresql/9.6/main
#+END_SRC

We then stop the PostgreSQL server:

#+BEGIN_SRC sh
  sudo service postgresql stop
#+END_SRC

And move the data directory to =/home/=:

#+BEGIN_SRC sh
  sudo mv /var/lib/postgresql /home/
#+END_SRC

We need to tell PostgreSQL about that change, so we edit the
=data_directory= variable in the config file:

#+BEGIN_SRC sh
  sudo nano /etc/postgresql/9.6/main/postgresql.conf
#+END_SRC

with:

#+BEGIN_SRC
  #------------------------------------------------------------------------------
  # FILE LOCATIONS
  #------------------------------------------------------------------------------
  
  data_directory = '/home/postgresql/9.6/main'
#+END_SRC

Finally, we restart the PostgreSQL server:

#+BEGIN_SRC sh
  sudo service postgresql start
#+END_SRC

And check out the PostgreSQL data directory again:

#+BEGIN_SRC sh
  psql test
#+END_SRC

#+BEGIN_SRC SQL
  SHOW data_directory;
#+END_SRC

This should return something like:

#+BEGIN_SRC 
          data_directory        
  ------------------------------
   /home/postgresql/9.6/main
#+END_SRC


** Enabling PostGIS on a database

With the Extension mechanism that is now part of PostgreSQL, enabling
PostGIS on a database has became super easy:

#+BEGIN_SRC sql
  CREATE EXTENSION postgis;
#+END_SRC

Note that raster is enabled by defaut since PostGIS 2.0.

To update extensions from a database:

#+BEGIN_SRC sql
  ALTER EXTENSION postgis UPDATE TO '2.3.1';
#+END_SRC

Finally, to check extensions on a database:

#+BEGIN_SRC sql
  SELECT name, default_version, installed_version
  FROM pg_available_extensions
  WHERE name LIKE 'postgis%';
#+END_SRC

Which should result in something like:

#+BEGIN_SRC 
            name          | default_version | installed_version 
  ------------------------+-----------------+-------------------
   postgis_topology       | 2.3.1           | 2.3.1
   postgis_tiger_geocoder | 2.3.1           | 
   postgis_sfcgal         | 2.3.1           | 
   postgis                | 2.3.1           | 2.3.1
#+END_SRC

We can also directly check the version of PostGIS and PostGIS raster:

#+BEGIN_SRC sql
  SELECT postgis_full_version();
  SELECT postgis_raster_lib_version();
#+END_SRC

# ** Enabling Pl/R on a database

# $ setfacl -m "u:postgres:r" /home/mathieu/.R-site/
# $ getfacl /home/mathieu/.R-site/

# + copy .Renviron/.Rprofile in postgresql home


# * Cleaning

# Nettoyage de la base

# • Taille de la base (en root ou postgres) :
# # du -h /home/postgres/main/base/
# # ls -Slh /home/postgres/main/base/17576 | less

# • Ménage dans la base : VACUUM
# Documentation : http://www.postgresql.org/docs/9.1/static/routine-vacuuming.html

# Besoin de faire des vacuum périodiquement, soit manuellement, soit via le autovacuum daemon. Un vacuum libère la place occupée par les lignes supprimées ou mises à jour et rafraîchit les statistiques utilisées par le query planner.

# VACUUM vs. VACUUM FULL : VACUUM FULL libère physiquement la mémoire, alors que VACUUM libère seulement la place pour pg. Par contre, VACUUM FULL nécessite un lock de la table et fais sensiblement augmenter la taille des index. VACUUM devrait être préféré sur une base régulière (par exemple une fois par jour), et de préférence via le démon qui s'adapte à la charge sur la base. Pour réécrire une table proprement (par exemple une table avec beaucoup d'activité), utiliser plutôt CLUSTER ou ALTER TABLE...

# Le démon autovacuum est activé par défaut. Pour le faire manuellement, utiliser la commande SQL 'VACUUM' ou bien l'utilitaire 'vacuumdb' :

# (((# su - postgres)))
# $ vacuumdb -d geodb -h localhost -U caribou -z -e
# $ vacuumdb -d geodb -h localhost -U caribou -z

# -e
# 	Affiche lac ommand SQL envoyée au serveur
# -z
# 	Ajoute ANALYSE à la commande VACUUM

# • Recréer les index
# Documentation : http://www.postgresql.org/docs/9.1/static/sql-reindex.html

# Peut être utile de temps en temps... On peut recréer les index d'une base en une commande :

# (((# su - postgres)))
# $ psql -h localhost -d geodb -U caribou -c 'REINDEX DATABASE geodb;'

# • Ménage dans les logs...
# Documentation : http://www.postgresql.org/docs/9.1/static/logfile-maintenance.html

# Utile ?



# * Backups

# Sauvegarde et restauration
# Documentation : http://www.postgresql.org/docs/9.1/static/backup.html

# • Dump
# Documentation : http://www.postgresql.org/docs/9.1/static/app-pgdump.html

# Dump with custom format (Note: The user can be the owner of the db, need not be postgres super account). 

# $ pg_dump -h localhost -p 5432 -Fc -b -v -N public -f "//home/mathieu/Work/datapg/geodb20141013.backup" geodb

# -Fc 
# 	specifies "custom format", which is basically Postgres' own dump format. It is smaller and faster to dump/restore than plain text. It also allows you at restore to selectively choose which tables or schemas you want to restore. But it can only restore to a Postgres database. Plain text, which builds the restore as SQL CREATE and INSERT statements, is slower, but can often be restored to non-Postgres databases. See
# http://www.postgresql.org/docs/8.4/static/app-pgdump.html
# -b 
# 	includes large objects in the dump;
# -v
# 	verbose
# -N public
# 	exludes schema 'public'

# • Restore
# Documentation : http://www.postgresql.org/docs/9.1/static/app-pgrestore.xhtml

# Lister les éléments de la sauvegarde :

# $ pg_restore -l file.bkp

# Restaurer un schéma donné dans une base donnée :

# $ pg_restore -h localhost -p 5432 -v -1 -d geodb -n schema file.bkp

# -j
# 	using multiple concurrent jobs (ideally, one per processor/core). Ex. '-j 3'
# -n 
# 	restore only the named schema
# -N
# 	restore except the named schema
# -v
# 	verbose
# -1
# 	restore as a single transaction (all the commands complete successfully, or no changes are applied)
# -O
# 	do not set owners as in the original DB. The user which runs the script will own every tables.

# Si besoin, lister les éléments avec -l, puis commenter ce qui n'est pas nécessaire avant la restauration (en utilisant alors le paramètre -L).
# -l
# 	lists the contents of the archive
# -L file
# 	restore only elements listed in the file
	

# Lancer un ANALYSE après la restauration. Si besoin, rajouter les contraintes des rasters si toutes les infos n'apparaissent pas dans raster_columns (cf. plus bas).

# • À partir du répertoire 'main' :
# Source : http://stackoverflow.com/questions/3305961/recover-postgresql-databases-from-raw-physical-files

# Simple sauvegarde des fichiers contenu dans le 'main'. Penser à arrêter le serveur pour restaurer la base.


