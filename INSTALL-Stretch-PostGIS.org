#+TITLE: Debian Testing (Stretch) PostGIS install
#+AUTHOR: Mathieu Basille
#+EMAIL: basille@ufl.edu

This is an additional tutorial to add PostGIS to a Debian Testing
(Stretch) install. The basis is covered in [[INSTALL-Stretch.org][Debian Testing (Stretch)
install]], but this tutorial should only require a functional Debian
Stretch.

* Table of contents                                                   :TOC_3:
 - [[#postgis-install][PostGIS install]]
   - [[#dependencies-and-clients][Dependencies and clients]]
   - [[#postgresql-and-pgadmin][PostgreSQL and pgAdmin]]
     - [[#pgadmin4][pgAdmin4]]
   - [[#postgis-and-plr][PostGIS and Pl/R]]
   - [[#uninstall][Uninstall]]
   - [[#test][Test]]
 - [[#post-install-operations][Post-install operations]]
   - [[#create-a-superuser][Create a superuser]]
   - [[#move-the-data-directory-to-home][Move the data directory to HOME]]
   - [[#activate-extensions-on-a-database][Activate extensions on a database]]
 - [[#backups][Backups]]

* PostGIS install

** Dependencies and clients

We first check or install required libraries: GDAL (2.1), GEOS (3.5)
and Proj4 (4.9), which are present in official Debian respositories:

#+BEGIN_SRC sh
  sudo apt install gdal-bin libgdal-dev libgeos-dev proj-bin libproj-dev
#+END_SRC

We can check the formats supported by OGR (vector) and GDAL (raster)
with:

#+BEGIN_SRC sh
ogrinfo --formats | grep Post
gdalinfo --formats | grep Post
#+END_SRC

which should return, respectively:

#+BEGIN_SRC sh
  PostgreSQL -vector- (rw+): PostgreSQL/PostGIS
  PGDUMP -vector- (w+v): PostgreSQL SQL dump
#+END_SRC

#+BEGIN_SRC sh
  PostGISRaster -raster- (rws): PostGIS Raster driver
#+END_SRC

We also install QGIS as the main GIS client. Debian does not ship the
most recent QGIS, so we first add the official QGIS repository:

#+BEGIN_SRC sh
  sudo nano /etc/apt/sources.list  
#+END_SRC

and add the following:

#+BEGIN_SRC sh
  ## ======================================================= ##
  ##                                                         ##
  ##                          QGIS                           ##
  ##                                                         ##
  ## ======================================================= ##
  ## URL:                                                    ##
  ## https://www.qgis.org/en/site/forusers/alldownloads.html#debian-ubuntu
  ## ======================================================= ##
  ## Note on QGIS versions:                                  ##
  ## The repository provides the latest release, LTR and     ##
  ## dev. Debian Jessie (stable), Stretch (testing) and Sid  ##
  ## are supported.                                          ##
  ## ======================================================= ##
  ## Key                                                     ##
  ## $ wget --quiet -O - http://qgis.org/downloads/qgis-2016.gpg.key | sudo apt-key add -
  ## ======================================================= ##

  ## Latest release
  deb http://qgis.org/debian stretch main
  #deb-src http://qgis.org/debian stretch main

  ## Long-term release
  #deb http://qgis.org/debian-ltr stretch main
  #deb-src http://qgis.org/debian-ltr stretch main

  ## Development Version
  #deb http://qgis.org/debian-nightly stretch main
  #deb-src http://qgis.org/debian-nightly stretch main
#+END_SRC

This requires to add the key of the repository and update the sources:

#+BEGIN_SRC sh
  wget --quiet -O - http://qgis.org/downloads/qgis-2016.gpg.key | sudo apt-key add -
  sudo apt update
#+END_SRC

We can now install the latest release of QGIS (2.18):

#+BEGIN_SRC sh
  sudo apt install qgis python-qgis
#+END_SRC


** PostgreSQL and pgAdmin

Like for QGIS, Debian does not always provide the most recent
PostgreSQL release.  We thus add the official PostgreSQL repository:

#+BEGIN_SRC sh
  sudo nano /etc/apt/sources.list  
#+END_SRC

and add the following:

#+BEGIN_SRC sh
  ## ======================================================= ##
  ##                                                         ##
  ##                        POSTGRESQL                       ##
  ##                                                         ##
  ## ======================================================= ##
  ## URL:                                                    ##
  ## https://wiki.postgresql.org/wiki/Apt                    ##
  ## ======================================================= ##
  ## Note on PostgreSQL versions:                            ##
  ## Debian Jessie (stable), Stretch (testing) and Sid are   ##
  ## supported.                                              ##
  ## To install latest relase, install meta-packages:        ##
  ## $ sudo apt install postgresql postgresql-contrib postgresql-client
  ## ======================================================= ##
  ## Key:                                                    ##
  ## $ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  ## ======================================================= ##

  deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main
#+END_SRC

This requires to add the key of the repository and update the sources:

#+BEGIN_SRC sh
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  sudo apt update
#+END_SRC

We can now install the latest release of PostgreSQL (9.6) and pgAdmin
(3 v1.22):

#+BEGIN_SRC 
  sudo apt install postgresql postgresql-client postgresql-contrib pgadmin3
#+END_SRC


*** pgAdmin4

Unfortunately, neither Debian nor official PostgreSQL ships
pgAdmin4. To install the latest release of pgAdmin (4 v1.22), which
comes as a web app, use PIP. First check dependencies:

#+BEGIN_SRC sh
  sudo apt-get install build-essential libssl-dev libffi-dev python-dev libgmp3-dev
  sudo pip install virtualenvwrapper cryptography pyopenssl ndg-httpsclient pyasn1
#+END_SRC

Then create a virtual environment named =pgadmin4= and activate it:

#+BEGIN_SRC sh
  cd
  virtualenv pgadmin4
  cd pgadmin4
  source bin/activate
#+END_SRC

Download and install pgAdmin4:

#+BEGIN_SRC sh
  wget https://ftp.postgresql.org/pub/pgadmin3/pgadmin4/v1.2/pip/pgadmin4-1.2-py2-none-any.whl
  sudo pip install pgadmin4
  rm pgadmin4-1.2-py2-none-any.whl
#+END_SRC

Finally remove the virtual environment:

#+BEGIN_SRC sh
  cd
  rm -r pgadmin4
#+END_SRC

To use pgAdmin4 on the desktop (i.e. not on a webserver), turn the
server mode OFF in the config file:

#+BEGIN_SRC sh
  sudo nano /usr/local/lib/python2.7/dist-packages/pgadmin4/config.py
#+END_SRC

#+BEGIN_SRC 
  ##########################################################################
  # Server settings
  ##########################################################################
  
  SERVER_MODE = False
#+END_SRC

And apply the settings:

#+BEGIN_SRC sh
  python /usr/local/lib/python2.7/dist-packages/pgadmin4/setup.py
#+END_SRC

To run pgAdmin4, we can create a shortlink in =/usr/local/bin/=:

#+BEGIN_SRC sh
  sudo touch /usr/local/bin/pgadmin4-run
  sudo chmod +x /usr/local/bin/pgadmin4-run
  sudo nano /usr/local/bin/pgadmin4-run
#+END_SRC

with the following in it:

#+BEGIN_SRC 
#!/bin/sh
  
python /usr/local/lib/python2.7/dist-packages/pgadmin4/pgAdmin4.py
#+END_SRC

Finally, type =pgadmin4-run= to start pgAdmin4, and access it at
[[http://localhost:5050]].


** PostGIS and Pl/R

Finally, we install the two extensions PostGIS and Pl/R (note that
this package is specific to each PostgreSQL version):

#+BEGIN_SRC sh
  sudo apt install postgis postgis-gui postgresql-9.6-plr 
#+END_SRC


** Uninstall

In case there is the need to uninstall PostgreSQL/PostGIS:

#+BEGIN_SRC sh
  sudo apt purge '.*postgis.*'
  sudo apt purge '.*postgresql.*'
#+END_SRC


** Test

We simply check that we can access the server:

#+BEGIN_SRC sh
  sudo -u postgres psql postgres
#+END_SRC

and check the PostgreSQL version:

#+BEGIN_SRC SQL
  SELECT version();
#+END_SRC

Use ~\q~ to exit.


* Post-install operations


** Create a superuser

On a single-user machine, we want to be able to use the Linux user as
a superuser of PostgreSQL. We thus add it as superuser:

#+BEGIN_SRC sh
   sudo -u postgres createuser --superuser $USER
#+END_SRC

We now create a database =test= using the Linux user, and access it:

#+BEGIN_SRC sh
  createdb test
  psql test
#+END_SRC

Finally, we change the password of the PostgreSQL superuser:

#+BEGIN_SRC sql
  ALTER USER mathieu PASSWORD 'mathieuSQL';
#+END_SRC

Thanks to the =ident sameuser= setting of PostgreSQL, we can access
databases on the system with the Linux user, without having to give
the password.


** Move the data directory to HOME

We start by checking out the PostgreSQL data directory:

#+BEGIN_SRC sh
  psql test
#+END_SRC

#+BEGIN_SRC SQL
  SHOW data_directory;
#+END_SRC

This should return something like:

#+BEGIN_SRC 
          data_directory        
  ------------------------------
   /var/lib/postgresql/9.6/main
#+END_SRC

We then stop the PostgreSQL server:

#+BEGIN_SRC sh
  sudo service postgresql stop
#+END_SRC

And move the data directory to =/home/=:

#+BEGIN_SRC sh
  sudo mv /var/lib/postgresql /home/
#+END_SRC

We need to tell PostgreSQL about that change, so we edit the
=data_directory= variable in the config file:

#+BEGIN_SRC sh
  sudo nano /etc/postgresql/9.6/main/postgresql.conf
#+END_SRC

with:

#+BEGIN_SRC
  #------------------------------------------------------------------------------
  # FILE LOCATIONS
  #------------------------------------------------------------------------------
  
  data_directory = '/home/postgresql/9.6/main'
#+END_SRC

Finally, we restart the PostgreSQL server:

#+BEGIN_SRC sh
  sudo service postgresql start
#+END_SRC

And check out the PostgreSQL data directory again:

#+BEGIN_SRC sh
  psql test
#+END_SRC

#+BEGIN_SRC SQL
  SHOW data_directory;
#+END_SRC

This should return something like:

#+BEGIN_SRC 
          data_directory        
  ------------------------------
   /home/postgresql/9.6/main
#+END_SRC


** Activate extensions on a database



* Backups

